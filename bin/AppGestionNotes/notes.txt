
// application.proterties

spring.datasource.url=jdbc:mysql://localhost:3306/gestionnote
spring.datasource.username=root
spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver

spring.jpa.hibernate.ddl-auto=create-drop
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.MySQL8Dialect

spring.jpa.show-sql=true
server.port=8081


spring.thymeleaf.cache=false


// ONE TO ONe

	@OneToOne(mappedBy = "compte")
	private Personne personne;

      ----------------

        @OneToOne()
	@JoinColumn(name = "matricule", referencedColumnName = "id", insertable = false, updatable = false)
	private Compte compte;


// MANY TO MANY

        @ManyToMany(mappedBy = "professeurs",fetch = FetchType.EAGER)
	private Set<Matiere> matieres = new HashSet<>();

      --------------------------

        @ManyToMany(fetch = FetchType.EAGER)
	@JoinTable(name = "Profs_Matriers", joinColumns = @JoinColumn(name = "id_matiere"), inverseJoinColumns = @JoinColumn         (name = "Id_Professeur"))
	private Set<Professeur> professeurs = new HashSet<>();


// CONTROLLER

	@RequestMapping(value = "/notes", method = RequestMethod.GET)
	public String index(Model model, @RequestParam(name = "page", defaultValue = "0") int page,
			@RequestParam(name = "size", defaultValue = "10") int size) {

		Page<Note> pagenotes = nr.findAll(PageRequest.of(page, size));
		System.out.println(pagenotes.getContent());
		model.addAttribute("listNotes", pagenotes.getContent());
		int[] pages = new int[pagenotes.getTotalPages()];
		model.addAttribute("pages", pages);
		model.addAttribute("pageCourante", page);
		model.addAttribute("size", size);
		return "Notes";
	}

VUE 


                             <table class="table table-striped">
					<tr>
						<th>Matricule Etudiant</th>
						<th>Etudiant</th>
						<th>Matiere</th>
						<th>Note</th>
						<th>Abreciation</th>
					</tr>
					<tr th:each="e:${listNotes}">
						<td th:text="${e.student.matricule}"></td>
						<td th:text="${e.student.nom} + ' ' + ${e.student.prenom}"></td>
						<td th:text="${e.matiere.nom}"></td>
						<td th:text="${e.note}"></td>
						<td th:text="${e.abreciation}"></td>
					</tr>
				</table>




/// POST MAPPING


           @RequestMapping(value = "/ajouternote", method = RequestMethod.POST)
	public String ajouterNote(Model model, String matricule, String nomMatiere, float note, String abreciation) {
		Optional<Student> s = sr.findById(Long.parseLong(matricule));
		Matiere m = mr.findByNom(nomMatiere);
		if (s.isPresent() && m != null) {
			nr.save(new Note(note, abreciation, s.get(), m));
			return "redirect:/notes";
		}
		model.addAttribute("matricule", matricule);
		model.addAttribute("nomMatiere", nomMatiere);
		model.addAttribute("note", note);
		model.addAttribute("abreciation", abreciation);
		return "ajouternote";
	}



                                    <form th:action="@{/ajouternote}" method="get">
					<div>
						<table class="table table-striped">
							<tr>
								<td><label>Matricule Etudiant : </label>
								</th>
								<td><input type="text" name="matriculeStudent" />
								</th>
								<td><label>Nom Matiere : </label>
								</th>
								<td><input type="text" name="nomMatiere" />
								</th>
								<td><button type="submit" class="btn                                                                         btn-primary">chercher</button>
								</th>
							</tr>
						</table>
					</div>
				</form>



// REPOSITORY

       Page<Professeur> findByNom(String nom, Pageable pageable);
	
	@Query("select p from Professeur p where p.nom like :x")
	public Page<Professeur> findProfesseurByNom(@Param("x") String nom, Pageable pageable);




// tri



[02:28, 6/17/2021] Alamo: <!DOCTYPE html>
<html lang="en" xmlns:th="http://www.w3.org/1999/xhtml">
<head>
    <meta charset="UTF-8">
    <title>Title</title>
</head>
<body>
    List of all students
    <form th:action="@{/etudiants}" method="get">
        <label>Chercher un etudiant par Nom:</label><br>
        <input type="text" name="nomStudent"><br>
        <input type="submit" value="Chercher">
    </form>
    <table>
        <thead>
        <tr>
            <th><a th:href =@{/etudiantsTri} >Nom</a></th>
            <th>Prenom</th>
            <th>Matricule</th>
            <th>Date naissance</th>
            <th>niveau</th>
            <th>Anne de reserve ? </th>
            <th>Notes de l'etudiant</th>
        </tr>
        </thead>
        <tbody>
            <tr th:each="student : ${students}" >
                <td th:text="${student.Nom}"></td>
                <td th:text="${student.Prenom}"></td>
                <td th:text="${student.Matricule}"></td>
                <td th:text="${student.date_naissance}"></td>
                <td th:text="${student.niveau}"></td>
                <td th:if="${student.anneeReserve == 0}">Oui</td>
                <td th:unless="${student.anneeReserve == 0}">Non</td>
                <td><a th:href="@{showNotes/{matricule}(matricule=${student.matricule})}">Consulter les notes de cet etudiant</a></td>

            </tr>

        </tbody>
    </table>
</body>
</html>
[02:28, 6/17/2021] Alamo: ha la page html
[02:29, 6/17/2021] Alamo: package com.example.demo.Controllers;

import com.example.demo.Model.Etudiant;
import com.example.demo.Model.Note;
import com.example.demo.Repository.EtudiantRepo;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;

import java.util.List;

@Controller
@RequestMapping("/")
public class StudentController {
    @Autowired
    private EtudiantRepo etudiantRepo;

    @RequestMapping(value = "/etudiants", method = RequestMethod.GET)
    public String allStudent(Model model, String nomStudent){
        if(nomStudent!= null){
            model.addAttribute("students", this.etudiantRepo.findByNom(nomStudent));
        }
        else{
            model.addAttribute("students",this.etudiantRepo.findAll());
        }
        return "Students";
    }
    @GetMapping("/showNotes/{matricule}")
    public String showNotes(@PathVariable(value = "matricule") int matricule, Model model){
        Etudiant etudiant = this.etudiantRepo.findById(matricule).get();
        List<Note> notesEtudiant = etudiant.getNotes();
        model.addAttribute("notes", notesEtudiant);
        return "NotesEtudiants";
    }
    @RequestMapping(value = "/etudiantsTri", method = RequestMethod.GET)
    public String allStudentTri(Model model){
        model.addAttribute("students", this.etudiantRepo.findAllByOrderByNom());
        return "Students";
    }
}
[02:29, 6/17/2021] Alamo: controlleur
[02:29, 6/17/2021] Alamo: repo :
[02:29, 6/17/2021] Alamo: package com.example.demo.Repository;

import com.example.demo.Model.Etudiant;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.data.jpa.repository.Query;
import org.springframework.stereotype.Repository;

import java.util.List;
import java.util.Optional;

@Repository
public interface EtudiantRepo extends JpaRepository<Etudiant, Integer> {
    List<Etudiant> findByNom(String nom);
    List<Etudiant> findAllByOrderByNom();

    //@Query(value = "SELECT e FROM Etudiant e ORDER BY e.nom")
    @Query(nativeQuery = true, value = "SELECT * FROM etudiant ORDER BY nom")
    List<Etudiant> etudiantTri();

}






